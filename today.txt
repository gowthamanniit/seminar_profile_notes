Destructuring Objects---------> old way
========================================
Here is the old way of using an object inside a function:

Before:
const vehicleOne = {        ------->this is json object
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

// old way
function myVehicle(vehicle) {
  const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '.';
}

destructing object ---------> new way
=======================================
<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>
  
<script>
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';

  document.getElementById("demo").innerHTML = message;
}
</script>

</body>
</html>

destructiong nested object ----------> new
===================================================
<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>
  
<script>
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red',
  registration: { -------------------> this is nested object
    city: 'Houston',
    state: 'Texas',
    country: 'USA'
  }
}

myVehicle(vehicleOne)

function myVehicle({ model, registration: { state } }) {
  const message = 'My ' + model + ' is registered in ' + state + '.';

  document.getElementById("demo").innerHTML = message;
}
</script>

</body>
</html>

6) React ES6 Spread Operator(...)
====================================================================================

Spread Operator
The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.

<!DOCTYPE html>
<html>

<body>

<script>
const numbersOne = [1, 2, 3];
const numbersTwo = [4, 5, 6];
const numbersCombined = [...numbersOne, ...numbersTwo];

document.write(numbersCombined);
</script>

</body>
</html>

o/p: 1,2,3,4,5,6
=====================spread operator with destructing=====
<!DOCTYPE html>
<html>

<body>

<script>
const numbers = [1, 2, 3, 4, 5, 6];

const [one, two, ...rest] = numbers;

document.write("<p>" + one + "</p>");
document.write("<p>" + two + "</p>");
document.write("<p>" + rest + "</p>");
</script>

</body>
</html>

o/p
1
2
3,4,5,6

note: one ,two ---> variables
      rest-----> array 
 
 ========================================   spread operator using object  ===========================
 <!DOCTYPE html>
<html>

<body>

<script>
const myVehicle = {
  brand: 'Ford',
  model: 'Mustang',
  color: 'red'
}

const updateMyVehicle = {
  type: 'car',
  year: 2021, 
  color: 'yellow'
}

const myUpdatedVehicle = {...myVehicle, ...updateMyVehicle}

//Check the result object in the console:
console.log(myUpdatedVehicle);
alert(myUpdatedVehicle);
</script>

<p>Press F12 for console view</p>

</body>
</html>

note: color two times repeated in two objects.but only one color accepted.(yellow)
===============================================================================
7)React ES6 Modules
===============================================================================
Modules
JavaScript modules allow you to break up your code into separate files.

This makes it easier to maintain the code-base.

ES Modules rely on the import and export statements.

Export
=======
You can export a function or variable from any file.

Let us create a file named person.js, and fill it with the things we want to export.

There are two types of exports: Named and Default.
==================================================

Named Exports
=============
You can create named exports two ways. In-line individually, or all at once at the bottom.

In-line individually:
====================
person.js

export const name = "Jesse"
export const age = "40"
note: only one export we can give in-line individually
All at once at the bottom:
==========================
person.js

const name = "Jesse"
const age = "40"

export { name, age }

Default Exports
================
Let us create another file, named message.js, and use it for demonstrating default export.

You can only have one default export in a file.

Example
message.js

const message = () => {
  const name = "Jesse";
  const age = "40";
  return name + ' is ' + age + 'years old.';
};

export default message;
-------------------------------------------------------------------------------------
Import
======
You can import modules into a file in two ways, based on if they are named exports or default exports.

Named exports must be destructured using curly braces. 

Default exports do not.

Import from named exports
=========================
Import named exports from the file person.js:

<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>

<script type="module">
import { name, age } from "./person.js";

document.getElementById("demo").innerHTML = "My name is " + name;
document.getElementById("demo").innerHTML += ", I am " + age + ".";

</script>

</body>
</html>

import from default exports:
=============================

<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>

<script type="module">
import message from "./message.js";

document.getElementById("demo").innerHTML = message();

</script>

</body>
</html>

7) ternary operator
=========================================================================
<!DOCTYPE html>
<html>

<body>

<h1 id="demo"></h1>

<script>
function renderApp() {
  document.getElementById("demo").innerHTML = "Welcome!";
}

function renderLogin() {
  document.getElementById("demo").innerHTML = "Please log in";
}

let authenticated = false;

authenticated ? renderApp() : renderLogin();

</script>

<p>Try changing the "authenticated" variable to false, and run the code to see what happens.</p>
</body>
</html>