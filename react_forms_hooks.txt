Forms: TO give input(dynamic)
===============================
Just like in HTML, React uses forms to allow users to interact with the web page.
Adding Forms in React
You add a form with React like any other element:
-----------------ex---------------------------------
import React from 'react';
import ReactDOM from 'react-dom';

function MyForm() {
  return (
    <form>
      <label>Enter your name:
        <input type="text" />
      </label>
    </form>
  )
}

ReactDOM.render(<MyForm />, document.getElementById('root'));
------------------------------------------------------------
Handling Forms
==============
Handling forms is about how you handle the data when it changes value or gets submitted.
In HTML, form data is usually handled by the DOM.

In React, form data is usually handled by the components.

When the data is handled by the components, all the data is stored in the component state.

You can control changes by adding event handlers in the onChange attribute.

We can use the useState Hook to keep track of each inputs value and provide a "single source of truth" for the entire application.

import { useState } from "react";
function LoginFunction()
{
    const[name,setName]=useState("");

return(
    <>
    <form>
    <h1>React forms handling Events</h1>
    <label>Enter Your Name:
        <input type="text" value={name} onChange={(e)=>setName(e.target.value)}></input>
    </label>
    </form>
    </>
);
}
export default LoginFunction;
================================================

import { useState } from "react";
function LoginFunction()
{
    const[name,setName]=useState("default text");
    const handleSubmit = (event) => {
        event.preventDefault();  // page without refresh
        alert('The name you entered was: '+name);
      }
return(
    <>
    <form onSubmit={handleSubmit}>
    <h1>React forms handling Events</h1>
    <label>Enter Your Name:
        <input type="text" value={name} onChange={(e)=>setName(e.target.value)}></input>
    </label>
    <input type="submit"></input>
    </form>
    </>
);
}
export default LoginFunction;
=======================================using Textarea=======

import { useState } from "react";
function LoginFunction() {

    const [address, setTextarea] = useState("The content of a textarea goes in the value attribute-default text area");
  
    const handleChange = (event) => {
      setTextarea(event.target.value)
    }
    function gowtham()
    {
        alert(address);
    }
  
    return (
      <form onSubmit={gowtham}>
        <textarea value={address} onChange={handleChange} />
        <input type="submit"></input>
      </form>
    )
  }
  export default LoginFunction;
  =======================================using select================
  import { useState } from "react";
  function LoginFunction() {
  
      const [myname, setmyname] = useState("gowthaman");
    
      const handleChange = (event) => {
          
        setmyname(event.target.value)
      }
      function gowthamfun(event)
      {          
          event.preventDefault(); // page without refresh 
          alert(myname);
      }
    
      return (
        <form onSubmit={gowthamfun}>
        <select value={myname} onChange={handleChange}>
        <option value="gow">Gow</option>
        <option value="gowthaman">Gowthaman</option>
        <option value="ajay">Ajay</option>
        <option value="thimothi">Thimothi</option>
      </select>
          
          <input type="submit"></input>
        </form>
      )
    }
    export default LoginFunction;
    ===================================
    Multiple Input Fields
    ========================
You can control the values of more than one input field by adding a name attribute to each element.

We will initialize our state with an empty object.

To access the fields in the event handler use the event.target.name and event.target.value syntax.

To update the state, use square brackets [bracket notation] around the property name.
  
// multiple input values

 import { useState } from "react";

function LoginFunction() {
  const [inputs, setInputs] = useState({});  // here usestate is object (multiple)

  const handleChange = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    setInputs(values => ({...values, [name]: value}))
  }

  const handleSubmit = (event) => {
    event.preventDefault();
    //alert(inputs);
    //console.log(inputs);
    alert(inputs.age);
    alert(inputs.username);
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>Enter your name:
      <input 
        type="text" 
        name="username" 
        value={inputs.username || ""} 
        onChange={handleChange}
      />
      </label>
      <label>Enter your age:
        <input 
          type="number" 
          name="age" 
          value={inputs.age || ""} 
          onChange={handleChange}
        />
        </label>
        <input type="submit" />
    </form>
  )
}
export default LoginFunction;