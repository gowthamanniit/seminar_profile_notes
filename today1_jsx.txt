React JSX
============
What is JSX?
JSX stands for JavaScript XML.

JSX allows us to write HTML in React.

JSX makes it easier to write and add HTML in React.

Coding JSX
===========
JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.

JSX converts HTML tags into react elements.

You are not required to use JSX, but JSX makes it easier to write React applications.

Here are two examples. The first uses JSX and the second does not:
====================================using jsx================================
import React from 'react';
import ReactDOM from 'react-dom';

const myelement = <h1>I Love JSX!</h1>;

ReactDOM.render(myelement, document.getElementById('root'));

====================================without using jsx================================
import React from 'react';
import ReactDOM from 'react-dom';

const myelement = React.createElement('h1', {}, 'I do not use JSX!');

ReactDOM.render(myelement, document.getElementById('root'));

=============================Expressions in JSX==============================================
With JSX you can write expressions inside curly braces { }.
import React from 'react';
import ReactDOM from 'react-dom';

const myelement = <h1>React is {5 + 5} times better with JSX</h1>;

ReactDOM.render(myelement, document.getElementById('root'));
===========================Inserting a Large Block of HTML===========
======To write HTML on multiple lines, put the HTML inside parentheses():====================
import React from 'react';
import ReactDOM from 'react-dom';

const myelement = (
  <ul>
    <li>Apples</li>
    <li>Bananas</li>
    <li>Cherries</li>
  </ul>
);

ReactDOM.render(myelement, document.getElementById('root'));

=================================One Top Level Element============================
The HTML code must be wrapped in ONE top level element.

So if you like to write two paragraphs, you must put them inside a parent element, like a div element.

import React from 'react';
import ReactDOM from 'react-dom';

const myelement = (
  <div>
    <h1>I am a Header.</h1>
    <h1>I am a Header too.</h1>
  </div>
);

ReactDOM.render(myelement, document.getElementById('root'));

===============================================================================
note: JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.
========================A fragment looks like an empty HTML tag: <></>.==========
import React from 'react';
import ReactDOM from 'react-dom';

const myelement = (
    <>
      <p>I am a paragraph.</p>
      <p>I am a paragraph too.</p>
    </>
  );
ReactDOM.render(myelement, document.getElementById('root'));
=========================Elements Must be Closed================================
JSX follows XML rules, and therefore HTML elements must be properly closed.

import React from 'react';
import ReactDOM from 'react-dom';

const myelement = <input type="text" />;

ReactDOM.render(myelement, document.getElementById('root'));

note: JSX will throw an error if the HTML is not properly closed.
=============================Attribute class = className=================================
use attribute className instead of class in JSX:

import React from 'react';
import ReactDOM from 'react-dom';
import './mystyle.css';

const myelement = <h1 className="myclass">Hello World</h1>;

ReactDOM.render(myelement, document.getElementById('root'));
================================Conditions - if statements============================================

React supports if statements, but not inside JSX.

To be able to use conditional statements in JSX, 
you should put the if statements outside of the JSX, or you could use a ternary expression instead:
Option 1:
Write if statements outside of the JSX code:

import React from 'react';
import ReactDOM from 'react-dom';

const x = 5;
let text = "Goodbye";
if (x < 10) {
  text = "Hello";
}

const myelement = <h1>{text}</h1>;

ReactDOM.render(myelement, document.getElementById('root'));
==================================================================================
Option 2:
Use ternary expressions instead:

import React from 'react';
import ReactDOM from 'react-dom';

const x = 5;

const myelement = <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>;

ReactDOM.render(myelement, document.getElementById('root'));
=====================================================================================
Note that in order to embed a JavaScript expression inside JSX, the JavaScript must be wrapped with curly braces, {}.